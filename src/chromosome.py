import torch
import torch.nn as nn

class Chromosome(nn.Module):
    """ Class representing neural network generated by EA.
    """
    def __init__(self, stages, nodes, chromosome_val="", num_classes=10):
        super(Chromosome, self).__init__()
        self.value = chromosome_val
        self.S = stages # number of stages
        self.K = nodes  # number of convolution layers in each stage
        
        self.stages = self.create_stages()
        self.between_stage = nn.Sequential(
                nn.MaxPool2d(kernel_size=2),
                nn.ReLU(inplace=True)
        )

        # TODO: change tmp to compute correct in_features size
        self.tmp = 42
        self.fin_linear = nn.Linear(self.tmp, num_classes)

    def forward(self, x):
        # TODO build connection logic here or in decode_chromosome() ? 
        for stage, nodes in self.stages.items():
            print(stage)
            # TODO inter stage logic
            
            x = self.between_stage(x) 

        # classifier part
        x = torch.flatten(x, 1)
        x = self.fin_linear(x)
        x = torch.softmax(x, dim=1)
        return x

    def decode_chromosome(self):
        """ Build convolutional connections based on encoded chromosome value
        """
        pass


    def create_stages(self):
        """ Create structure containing K nodes that will be connected
            according to the chromosome value.
        """
        stage_dict = {}

        # generate stages -> modules containing differently connected 
        # con2d layers according to the genes
        for stage in range(self.S):
            stage_nodes = nn.ModuleList([]) 
            
            # generate conv2d layers in current stage
            for _ in range(self.K):
               stage_nodes.append(nn.Linear(10,10)) # TODO change to correct conv2d

            stage_dict['stage{}'.format(stage)] = stage_nodes 

        return nn.ModuleDict(stage_dict) 


if __name__=='__main__':
    model = Chromosome(3,4)
    model(1)
    print("=============================")
    for module in model.children():
        print(module)
